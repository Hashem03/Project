Index: app/src/main/java/com/gamecodeschool/csc133project/SnakeGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gamecodeschool.csc133project;\r\n\r\nimport android.content.Context;\r\nimport android.content.res.AssetFileDescriptor;\r\nimport android.content.res.AssetManager;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Point;\r\nimport android.media.AudioAttributes;\r\nimport android.media.AudioManager;\r\nimport android.media.SoundPool;\r\nimport android.os.Build;\r\nimport android.view.MotionEvent;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.SurfaceView;\r\nimport java.io.IOException;\r\n\r\nclass SnakeGame extends SurfaceView implements Runnable{\r\n\r\n    // Objects for the game loop/thread\r\n    private Thread mThread = null;\r\n    // Control pausing between updates\r\n    private long mNextFrameTime;\r\n    // Is the game currently playing and or paused?\r\n    private volatile boolean mPlaying = false;\r\n    private volatile boolean mPaused = true;\r\n\r\n    // for playing sound effects\r\n    private SoundPool mSP;\r\n    private int mEat_ID = -1;\r\n    private int mCrashID = -1;\r\n\r\n    // The size in segments of the playable area\r\n    private final int NUM_BLOCKS_WIDE = 40;\r\n    private int mNumBlocksHigh;\r\n\r\n    // How many points does the player have\r\n    private int mScore;\r\n\r\n    // Objects for drawing\r\n    private Canvas mCanvas;\r\n    private SurfaceHolder mSurfaceHolder;\r\n    private Paint mPaint;\r\n\r\n    // A snake ssss\r\n    private Snake mSnake;\r\n    // And an apple\r\n    private Apple mApple;\r\n\r\n\r\n    // This is the constructor method that gets called\r\n    // from SnakeActivity\r\n    public SnakeGame(Context context, Point size) {\r\n        super(context);\r\n\r\n        // Work out how many pixels each block is\r\n        int blockSize = size.x / NUM_BLOCKS_WIDE;\r\n        // How many blocks of the same size will fit into the height\r\n        mNumBlocksHigh = size.y / blockSize;\r\n\r\n        // Initialize the SoundPool\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n            AudioAttributes audioAttributes = new AudioAttributes.Builder()\r\n                    .setUsage(AudioAttributes.USAGE_MEDIA)\r\n                    .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)\r\n                    .build();\r\n\r\n            mSP = new SoundPool.Builder()\r\n                    .setMaxStreams(5)\r\n                    .setAudioAttributes(audioAttributes)\r\n                    .build();\r\n        } else {\r\n            mSP = new SoundPool(5, AudioManager.STREAM_MUSIC, 0);\r\n        }\r\n        try {\r\n            AssetManager assetManager = context.getAssets();\r\n            AssetFileDescriptor descriptor;\r\n\r\n            // Prepare the sounds in memory\r\n            descriptor = assetManager.openFd(\"get_apple.ogg\");\r\n            mEat_ID = mSP.load(descriptor, 0);\r\n\r\n            descriptor = assetManager.openFd(\"snake_death.ogg\");\r\n            mCrashID = mSP.load(descriptor, 0);\r\n\r\n        } catch (IOException e) {\r\n            // Error\r\n        }\r\n\r\n        // Initialize the drawing objects\r\n        mSurfaceHolder = getHolder();\r\n        mPaint = new Paint();\r\n\r\n        // Call the constructors of our two game objects\r\n        mApple = new Apple(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n\r\n        mSnake = new Snake(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n\r\n    }\r\n\r\n\r\n    // Called to start a new game\r\n    public void newGame() {\r\n\r\n        // reset the snake\r\n        mSnake.reset(NUM_BLOCKS_WIDE, mNumBlocksHigh);\r\n\r\n        // Get the apple ready for dinner\r\n        mApple.spawn();\r\n\r\n        // Reset the mScore\r\n        mScore = 0;\r\n\r\n        // Setup mNextFrameTime so an update can triggered\r\n        mNextFrameTime = System.currentTimeMillis();\r\n    }\r\n\r\n\r\n    // Handles the game loop\r\n    @Override\r\n    public void run() {\r\n        while (mPlaying) {\r\n            if(!mPaused) {\r\n                // Update 10 times a second\r\n                if (updateRequired()) {\r\n                    update();\r\n                }\r\n            }\r\n\r\n            draw();\r\n        }\r\n    }\r\n\r\n\r\n    // Check to see if it is time for an update\r\n    public boolean updateRequired() {\r\n\r\n        // Run at 10 frames per second\r\n        final long TARGET_FPS = 10;\r\n        // There are 1000 milliseconds in a second\r\n        final long MILLIS_PER_SECOND = 1000;\r\n\r\n        // Are we due to update the frame\r\n        if(mNextFrameTime <= System.currentTimeMillis()){\r\n            // Tenth of a second has passed\r\n\r\n            // Setup when the next update will be triggered\r\n            mNextFrameTime =System.currentTimeMillis()\r\n                    + MILLIS_PER_SECOND / TARGET_FPS;\r\n\r\n            // Return true so that the update and draw\r\n            // methods are executed\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    // Update all the game objects\r\n    public void update() {\r\n\r\n        // Move the snake\r\n        mSnake.move();\r\n\r\n        // Did the head of the snake eat the apple?\r\n        if(mSnake.checkDinner(mApple.getLocation())){\r\n            // This reminds me of Edge of Tomorrow.\r\n            // One day the apple will be ready!\r\n            mApple.spawn();\r\n\r\n            // Add to  mScore\r\n            mScore = mScore + 1;\r\n\r\n            // Play a sound\r\n            mSP.play(mEat_ID, 1, 1, 0, 0, 1);\r\n        }\r\n\r\n        // Did the snake die?\r\n        if (mSnake.detectDeath()) {\r\n            // Pause the game ready to start again\r\n            mSP.play(mCrashID, 1, 1, 0, 0, 1);\r\n\r\n            mPaused =true;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // Do all the drawing\r\n    public void draw() {\r\n        // Get a lock on the mCanvas\r\n        if (mSurfaceHolder.getSurface().isValid()) {\r\n            mCanvas = mSurfaceHolder.lockCanvas();\r\n\r\n            // Fill the screen with a color\r\n            mCanvas.drawColor(Color.argb(255, 26, 128, 182));\r\n\r\n            // Set the size and color of the mPaint for the text\r\n            mPaint.setColor(Color.argb(255, 255, 255, 255));\r\n            mPaint.setTextSize(120);\r\n\r\n            // Draw the score\r\n            mCanvas.drawText(\"\" + mScore, 20, 120, mPaint);\r\n\r\n            // Draw the apple and the snake\r\n            mApple.draw(mCanvas, mPaint);\r\n            mSnake.draw(mCanvas, mPaint);\r\n\r\n            // Draw some text while paused\r\n            if(mPaused){\r\n\r\n                // Set the size and color of the mPaint for the text\r\n                mPaint.setColor(Color.argb(255, 255, 255, 255));\r\n                mPaint.setTextSize(250);\r\n\r\n                // Draw the message\r\n                // We will give this an international upgrade soon\r\n                //mCanvas.drawText(\"Tap To Play!\", 200, 700, mPaint);\r\n                mCanvas.drawText(getResources().\r\n                                getString(R.string.tap_to_play),\r\n                        200, 700, mPaint);\r\n            }\r\n\r\n\r\n            // Unlock the mCanvas and reveal the graphics for this frame\r\n            mSurfaceHolder.unlockCanvasAndPost(mCanvas);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean onTouchEvent(MotionEvent motionEvent) {\r\n        switch (motionEvent.getAction() & MotionEvent.ACTION_MASK) {\r\n            case MotionEvent.ACTION_UP:\r\n                if (mPaused) {\r\n                    mPaused = false;\r\n                    newGame();\r\n\r\n                    // Don't want to process snake direction for this tap\r\n                    return true;\r\n                }\r\n\r\n                // Let the Snake class handle the input\r\n                mSnake.switchHeading(motionEvent);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    // Stop the thread\r\n    public void pause() {\r\n        mPlaying = false;\r\n        try {\r\n            mThread.join();\r\n        } catch (InterruptedException e) {\r\n            // Error\r\n        }\r\n    }\r\n\r\n\r\n    // Start the thread\r\n    public void resume() {\r\n        mPlaying = true;\r\n        mThread = new Thread(this);\r\n        mThread.start();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/gamecodeschool/csc133project/SnakeGame.java b/app/src/main/java/com/gamecodeschool/csc133project/SnakeGame.java
--- a/app/src/main/java/com/gamecodeschool/csc133project/SnakeGame.java	
+++ b/app/src/main/java/com/gamecodeschool/csc133project/SnakeGame.java	
@@ -47,7 +47,7 @@
     private Snake mSnake;
     // And an apple
     private Apple mApple;
-
+    private Wall mWall;
 
     // This is the constructor method that gets called
     // from SnakeActivity
@@ -102,7 +102,7 @@
                 new Point(NUM_BLOCKS_WIDE,
                         mNumBlocksHigh),
                 blockSize);
-
+        mWall = new Wall(context, new Point(NUM_BLOCKS_WIDE, mNumBlocksHigh), blockSize);
     }
 
 
@@ -114,7 +114,7 @@
 
         // Get the apple ready for dinner
         mApple.spawn();
-
+        mWall.spawn(mSnake, mApple);
         // Reset the mScore
         mScore = 0;
 
@@ -169,13 +169,17 @@
 
         // Move the snake
         mSnake.move();
+        if (mSnake.checkCollide(mWall)) {
+            mSP.play(mCrashID, 1, 1, 0, 0, 1);
 
-        // Did the head of the snake eat the apple?
-        if(mSnake.checkDinner(mApple.getLocation())){
+            mPaused =true;
+        }/* Did the head of the snake eat the apple?*/else if(mSnake.checkDinner(mApple.getLocation())){
             // This reminds me of Edge of Tomorrow.
             // One day the apple will be ready!
             mApple.spawn();
 
+            mWall.spawn(mSnake,mApple);
+
             // Add to  mScore
             mScore = mScore + 1;
 
@@ -213,6 +217,7 @@
             // Draw the apple and the snake
             mApple.draw(mCanvas, mPaint);
             mSnake.draw(mCanvas, mPaint);
+            mWall.draw(mCanvas, mPaint);
 
             // Draw some text while paused
             if(mPaused){
